package elementaryAlgorithm;

import java.util.HashMap;
import java.util.Map;

/**
 * @功能职责:
 * @描述：
 * 请你判断一个 9x9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
 *
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 *
 * 注意：
 *
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 *  
 *
 * 示例 1：
 *
 *
 * 输入：board =
 * [['5','3','.','.','7','.','.','.','.']
 * ,['6','.','.','1','9','5','.','.','.']
 * ,['.','9','8','.','.','.','.','6','.']
 * ,['8','.','.','.','6','.','.','.','3']
 * ,['4','.','.','8','.','3','.','.','1']
 * ,['7','.','.','.','2','.','.','.','6']
 * ,['.','6','.','.','.','.','2','8','.']
 * ,['.','.','.','4','1','9','.','.','5']
 * ,['.','.','.','.','8','.','.','7','9']]
 * 输出：true
 * 示例 2：
 *
 * 输入：board =
 * [['8','3','.','.','7','.','.','.','.']
 * ,['6','.','.','1','9','5','.','.','.']
 * ,['.','9','8','.','.','.','.','6','.']
 * ,['8','.','.','.','6','.','.','.','3']
 * ,['4','.','.','8','.','3','.','.','1']
 * ,['7','.','.','.','2','.','.','.','6']
 * ,['.','6','.','.','.','.','2','8','.']
 * ,['.','.','.','4','1','9','.','.','5']
 * ,['.','.','.','.','8','.','.','7','9']]
 * 输出：false
 * 解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 *  
 *
 * 提示：
 *
 * board.length == 9
 * board[i].length == 9
 * board[i][j] 是一位数字或者 '.'
 *
 * 作者：力扣 (LeetCode)
 * 链接：https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2f9gg/
 * 来源：力扣（LeetCode）
 * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
 * @作者: 郭辉
 * @创建时间: 2020-12-02
 * @copyright Copyright (c) 2020 中国软件与技术服务股份有限公司
 * @company 中国软件与技术服务股份有限公司
 */
public class EffectiveSudoku {
    public boolean isValidSudoku(char[][] board) {
        //列
        Map<Character, Character> map = new HashMap<>();
        for (int i = 0; i < 9; i++) {
            map.clear();
            for (int j = 0; j < 9; j++){
                if (board[i][j] != '.'){
                    if (map.get(board[i][j]) != null){
                        return false;
                    }
                    map.put(board[i][j],board[i][j]);
                }

            }
        }
        //行
        for (int i = 0; i < 9; i++) {
            map.clear();
            for (int j = 0; j < 9; j++){
                if (board[j][i] != '.'){
                    if (map.get(board[j][i]) != null){
                        return false;
                    }
                    map.put(board[j][i],board[j][i]);
                }
            }
        }
        //3x3网格
        for (int x = 0; x<9; x+=3){
            for (int y = 0; y<9; y+=3){
                map.clear();
                for (int j = 0; j < 3; j++) {
                    for (int k = 0; k < 3; k++) {
                        if (board[j+x][k+y] != '.'){
                            if (map.get(board[j+x][k+y]) != null && map.get(board[j+x][k+y]) != '.'){
                                return false;
                            }
                            map.put(board[j+x][k+y],board[j+x][k+y]);
                        }
                    }
                }
            }
        }
        return true;
    }

    public static void main(String[] args) {
        char[][] pam = 
                {{'5','3','.','.','7','.','.','.','.'}
        ,{'6','.','.','1','9','5','.','.','.'}
        ,{'.','9','8','.','.','.','.','6','.'}
        ,{'8','.','.','.','6','.','.','.','3'}
        ,{'4','.','.','8','.','3','.','.','1'}
        ,{'7','.','.','.','2','.','.','.','6'}
        ,{'.','6','.','.','.','.','2','8','.'}
        ,{'.','.','.','4','1','9','.','.','5'}
        ,{'.','.','.','.','8','.','.','7','9'}};

        char[][] board = 
                {{'8','3','.','.','7','.','.','.','.'}
        ,{'6','.','.','1','9','5','.','.','.'}
        ,{'.','9','8','.','.','.','.','6','.'}
        ,{'8','.','.','.','6','.','.','.','3'}
        ,{'4','.','.','8','.','3','.','.','1'}
        ,{'7','.','.','.','2','.','.','.','6'}
        ,{'.','6','.','.','.','.','2','8','.'}
        ,{'.','.','.','4','1','9','.','.','5'}
        ,{'.','.','.','.','8','.','.','7','9'}};
        
        char[][] pam3 = 
        {{'.','.','.','.','5','.','.','1','.'}
        ,{'.','4','.','3','.','.','.','.','.'}
        ,{'.','.','.','.','.','3','.','.','1'}
        ,{'8','.','.','.','.','.','.','2','.'}
        ,{'.','.','2','.','7','.','.','.','.'}
        ,{'.','1','5','.','.','.','.','.','.'}
        ,{'.','.','.','.','.','2','.','.','.'}
        ,{'.','2','.','9','.','.','.','.','.'}
        ,{'.','.','4','.','.','.','.','.','.'}};
        
        EffectiveSudoku effectiveSudoku = new EffectiveSudoku();
        System.out.println(effectiveSudoku.isValidSudoku(pam3));
    }
}
